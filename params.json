{"tagline":"JTar is a simple Java Tar library, that provides an easy way to create and read tar files using IO streams. The API is very simple to use and similar to the java.util.zip package. ","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Overview\r\nJTar is a simple Java Tar library, that provides an easy way to create and read tar files using IO streams. The API is very simple to use and similar to the java.util.zip package and also __supports UStar format__.\r\n\r\n## Usage\r\nJTar is available in maven central and can be added as a dependency in the maven project.\r\n<pre><code>  &lt;dependency&gt;\r\n    &lt;groupId&gt;org.kamranzafar&lt;/groupId&gt;\r\n    &lt;artifactId&gt;jtar&lt;/artifactId&gt;\r\n    &lt;version&gt;2.2&lt;/version&gt;\r\n  &lt;/dependency&gt;\r\n</code></pre>\r\n\r\nBelow are some examples of using jtar in applications\r\n\r\n### Tar example - using TarOutputStream\r\n<pre><code>  // Output file stream\r\n  FileOutputStream dest = new FileOutputStream( \"c:/test/test.tar\" );\r\n  \r\n  // Create a TarOutputStream\r\n  TarOutputStream out = new TarOutputStream( new BufferedOutputStream( dest ) );\r\n  \r\n  // Files to tar\r\n  File[] filesToTar=new File[2];\r\n  filesToTar[0]=new File(\"c:/test/myfile1.txt\");\r\n  filesToTar[1]=new File(\"c:/test/myfile2.txt\");\r\n  \r\n  for(File f:filesToTar){\r\n     out.putNextEntry(new TarEntry(f, f.getName()));\r\n     BufferedInputStream origin = new BufferedInputStream(new FileInputStream( f ));\r\n     int count;\r\n     byte data[] = new byte[2048];\r\n  \r\n     while((count = origin.read(data)) != -1) {\r\n        out.write(data, 0, count);\r\n     }\r\n  \r\n     out.flush();\r\n     origin.close();\r\n  }\r\n  \r\n  out.close();\r\n</code></pre>\r\n\r\n### Untar example - using TarInputStream\r\n<pre><code>  String tarFile = \"c:/test/test.tar\";\r\n  String destFolder = \"c:/test/myfiles\";\r\n  \r\n  // Create a TarInputStream\r\n  TarInputStream tis = new TarInputStream(new BufferedInputStream(new FileInputStream(tarFile)));\r\n  TarEntry entry;\r\n  \r\n  while((entry = tis.getNextEntry()) != null) {\r\n     int count;\r\n     byte data[] = new byte[2048];\r\n     FileOutputStream fos = new FileOutputStream(destFolder + \"/\" + entry.getName());\r\n     BufferedOutputStream dest = new BufferedOutputStream(fos);\r\n  \r\n     while((count = tis.read(data)) != -1) {\r\n        dest.write(data, 0, count);\r\n     }\r\n  \r\n     dest.flush();\r\n     dest.close();\r\n  }\r\n  \r\n  tis.close();\r\n</code></pre>\r\n\r\n___Tip: Always use buffered streams with jtar to speed up IO.___\r\n\r\n## Examples and resources\r\n\r\n* See [JTarTest](https://github.com/kamranzafar/jtar/blob/master/src/test/java/org/kamranzafar/jtar/JTarTest.java) class, provided with the source, for more detailed examples.\r\n* Visit the wiki page for more details on [Tar format](http://en.wikipedia.org/wiki/Tar_%28file_format%29)\r\n\r\n__JTar is available in [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.kamranzafar%22%20a%3A%22jtar%22)__\r\n","google":"","name":"Jtar"}